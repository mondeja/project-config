name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
    tags:
      - v*

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            python-version: 3.7
          - platform: ubuntu-latest
            python-version: 3.8
          - platform: ubuntu-latest
            python-version: 3.9
          - platform: ubuntu-latest
            python-version: '3.10'
          - platform: macos-latest
            python-version: 3.7
          - platform: macos-latest
            python-version: '3.10'
          - platform: windows-latest
            python-version: 3.7
          - platform: windows-latest
            python-version: '3.10'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python v${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Use NodeJS v16
        if: runner.os != 'Windows'
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Install poetry
        id: poetry
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org > __install_poetry.py
          python __install_poetry.py --preview
          scripts_path=$(python -c 'import __install_poetry as i;print(i.bin_dir())')
          rm __install_poetry.py
          echo $scripts_path >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          poetry install --with test
          poetry show
      - name: Run tests
        run: poetry run coverage run -m pytest -sv
        env:
          PROJECT_CONFIG_TESTS_E2E: true
      - name: Coveralls
        # Coveralls is in maintainance mode
        run: |
          pip install coveralls coverage[toml]
          coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_SERVICE_NAME: github

  test-docs:
    name: Test documentation build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - --preview
          poetry self add poetry-exec-plugin
          poetry self show plugins
      - name: Set up Python v3
        uses: actions/setup-python@v3
        with:
          python-version: 3.x
          cache: poetry
      - name: Install dependencies
        run: |
          poetry install --with doc
          poetry show
      - name: Build documentation
        run: poetry exec doc
        env:
          SPHINX_GITHUB_CHANGELOG_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v3
        with:
          path: docs/_build/html/*

  build-dist:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test
      - test-docs
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry==1.2.0b3
      - uses: actions/setup-python@v3
        name: Install Python v3.x
        with:
          python-version: 3.x
      - name: Build package
        run: poetry build
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*
          name: distribution

  pypi-upload:
    name: Upload to PyPI
    needs: build-dist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: distribution
          path: dist
      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          # repository_url: https://test.pypi.org/legacy/
          skip_existing: true

  npm-upload:
    needs: pypi-upload
    name: Upload to NPM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use NodeJS v16
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Deploy to NPM
        uses: JS-DevTools/npm-publish@v1.4.3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: contrib/npm/package.json
          greater-version-only: true

  release:
    name: Release
    needs: build-dist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get tag metadata
        id: tag
        run: |
          TAG_TITLE=${GITHUB_REF#refs/*/}
          echo ::set-output name=title::$TAG_TITLE
          git -c protocol.version=2 fetch --prune --progress \
            --no-recurse-submodules origin \
            +refs/heads/*:refs/remotes/origin/* +refs/tags/*:refs/tags/*
          TAG_BODY="$(git tag -l --format='%(contents)' $TAG_TITLE)"
          TAG_BODY="${TAG_BODY//'%'/'%25'}"
          TAG_BODY="${TAG_BODY//$'\n'/'%0A'}"
          TAG_BODY="${TAG_BODY//$'\r'/'%0D'}"
          echo ::set-output name=body::$TAG_BODY
      - name: Create Release
        uses: actions/create-release@v1.1.4
        id: create-release
        with:
          tag_name: ${{ steps.tag.outputs.title }}
          release_name: ${{ steps.tag.outputs.title }}
          body: ${{ steps.tag.outputs.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.CREATE_RELEASE_TOKEN }}
      - uses: actions/download-artifact@v3
        name: Download builds
        with:
          name: distribution
          path: dist
      - uses: shogo82148/actions-upload-release-asset@v1
        name: Upload release assets
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/*
