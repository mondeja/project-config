name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
    tags:
      - v*

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install -U hatch
      - name: Get project-config cache directory
        id: project-config-cache
        run: echo "directory=$(hatch --quiet --no-interactive run project-config show cache)" >> $GITHUB_OUTPUT
      - name: Cache project-config
        uses: actions/cache@v3
        with:
          path: ${{ steps.project-config-cache.outputs.directory }}
          key: ${{ steps.project-config-cache.outputs.directory }}
      - name: Lint
        run: hatch run style:lint
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  full-gha-report:
    name: project-config GHA reporter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install -U hatch
      - name: Report
        run: |
          echo "# project-config full report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          hatch run project-config show config -r github-actions
          hatch run project-config show plugins -r github-actions
          hatch run project-config show style -r github-actions
          hatch run project-config check || \
            hatch run project-config fix -r github-actions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            python-version: 3.8
            py: py38
          - platform: ubuntu-latest
            python-version: 3.9
            py: py39
          - platform: ubuntu-latest
            python-version: "3.10"
            py: py310
          - platform: ubuntu-latest
            python-version: "3.11"
            py: py311
          - platform: ubuntu-latest
            python-version: "3.12"
            py: py312
          - platform: macos-latest
            python-version: 3.8
            py: py38
          - platform: macos-latest
            python-version: "3.11"
            py: py311
          - platform: macos-latest
            python-version: "3.12"
            py: py312
          - platform: windows-latest
            python-version: 3.8
            py: py38
          - platform: windows-latest
            python-version: "3.11"
            py: py311
          - platform: windows-latest
            python-version: "3.12"
            py: py312
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python v${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install NodeJS
        if: runner.os == 'Linux'
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install dependencies
        run: pip install -U hatch
      - name: Run tests
        run: hatch run +py=${{ matrix.py }} tests:all
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Convert coverage to XML
        run: |
          pip install coverage covdefaults
          coverage xml
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-docs:
    name: Test documentation build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install -U hatch
      - name: Build documentation
        run: hatch run docs:build
        env:
          SPHINX_GITHUB_CHANGELOG_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v4
        with:
          path: docs/_build/html/*

  build-wheel-sdist:
    needs:
      - lint
      - test
      - test-docs
      - full-gha-report
    name: Build package wheel and sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: "3.11"
      - name: Install build dependencies
        run: pip install -U hatch
      - name: Build package
        run: hatch build
      - uses: actions/upload-artifact@v4
        with:
          path: dist/*
          name: wheel-sdist

  build-standalone-dist:
    name: Build standalone distribution binaries
    needs: build-wheel-sdist
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install -U pyinstaller
      - name: Build standalone distribution
        shell: bash
        run: sh scripts/build.sh
      - name: Prepare upload
        run: mv dist/project-config dist/project-config-${{ matrix.runs-on }}
      - uses: actions/upload-artifact@v4
        with:
          path: dist/*
          name: standalone-dist-${{ matrix.runs-on }}

  download-dists:
    name: Download distributions
    runs-on: ubuntu-latest
    needs:
      - build-wheel-sdist
      - build-standalone-dist
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: wheel-sdist
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: standalone-dist-ubuntu-latest
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: standalone-dist-macos-latest
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: standalone-dist-windows-latest
          path: dist
      - name: Check downloaded files
        run: ls -l dist

  pypi-upload:
    name: Upload to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-wheel-sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheel-sdist
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          # repository_url: https://test.pypi.org/legacy/
          skip-existing: true

  npm-upload:
    name: Upload to NPM
    if: startsWith(github.ref, 'refs/tags/')
    needs: pypi-upload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Deploy to NPM
        uses: JS-DevTools/npm-publish@v1.4.3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: contrib/npm/package.json

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build-wheel-sdist
      - build-standalone-dist
      - pypi-upload
      - npm-upload
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get tag metadata
        id: tag
        run: |
          TAG_TITLE=${GITHUB_REF#refs/*/}
          echo "title=$TAG_TITLE" >> $GITHUB_OUTPUT
          git -c protocol.version=2 fetch --prune --progress \
            --no-recurse-submodules origin \
            +refs/heads/*:refs/remotes/origin/* +refs/tags/*:refs/tags/*
          TAG_BODY="$(git tag -l --format='%(contents)' $TAG_TITLE)"
          TAG_BODY="${TAG_BODY//'%'/'%25'}"
          TAG_BODY="${TAG_BODY//$'\n'/'%0A'}"
          TAG_BODY="${TAG_BODY//$'\r'/'%0D'}"
          echo "body=$TAG_BODY" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: softprops/action-gh-release@v1
        id: create-release
        with:
          name: ${{ steps.tag.outputs.title }}
          tag_name: ${{ steps.tag.outputs.title }}
          body: ${{ steps.tag.outputs.body }}
          draft: false
          prerelease: false
      - uses: actions/download-artifact@v4
        name: Download builds
        with:
          name: wheel-sdist
          path: dist
      - uses: shogo82148/actions-upload-release-asset@v1
        name: Upload release assets
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/*
